import gspread
from pathlib import Path
from .models import Member
from django.db import transaction

url = "https://docs.google.com/spreadsheets/d/17z0bMg0450f1EZ86QSfulXqo3mMgapnD2n0f654Ipaw/edit?fbclid=IwAR1ZvLXSIibWkHb_RrQ5lV4ZyjL13iR0z3tmPEKaGzET-gwT6UEy_rffP_U#gid=1851865664"


def parse_amount(amount):
    amount = amount.strip()
    if amount == "-":
        return float(0)
    return float(amount.replace(",", ""))


def fetch_data():
    current_path = Path.cwd()
    current_path = current_path.joinpath("mysite\secret\credential.json")
    creds = gspread.service_account(current_path)
    sheet = creds.open_by_url(url).get_worksheet(0)

    status_list = sheet.col_values(1)[13:]
    detail_list = []

    for status in status_list:
        if status == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
            detail_list.append("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
        elif (
            status == "‡∏Ç‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏£‡∏û."
            or status == "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å ‡∏ú‡∏≠‡∏Å."
            or status == "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏™‡∏™‡∏à.‡∏•‡∏≥‡∏û‡∏π‡∏ô"
            or status == "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å ‡∏™‡∏™‡∏à.‡∏•‡∏≥‡∏û‡∏π‡∏ô"
        ):
            detail_list.append("‡∏Ç‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
        elif (
            status == "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å ‡∏ô‡∏û.‡∏™‡∏™‡∏à.‡∏•‡∏≥‡∏û‡∏π‡∏ô ‡πÅ‡∏•‡πâ‡∏ß"
            or status == "‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
            or status == "‡πÄ‡∏™‡∏ô‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
            or status == "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
        ):
            detail_list.append("‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô")
        elif (
            status == "‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"
            or status == "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"
            or status == "‡πÄ‡∏™‡∏ô‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
        ):
            detail_list.append("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

    code_list = sheet.col_values(5)[13:]
    name_list = sheet.col_values(6)[13:]
    agency_list = sheet.col_values(10)[13:]
    total_list = [parse_amount(total) for total in sheet.col_values(15)[13:]]
    withdraw_list = [parse_amount(money) for money in sheet.col_values(17)[13:]]

    return (
        code_list,
        name_list,
        agency_list,
        status_list,
        total_list,
        withdraw_list,
        detail_list,
    )


@transaction.atomic
def updateDB(
    code_list,
    name_list,
    agency_list,
    status_list,
    total_list,
    withdraw_list,
    detail_list,
):
    for i in range(len(name_list)):
        member, created = Member.objects.update_or_create(
            projectName=name_list[i],
            defaults={
                "code": code_list[i],
                "agency": agency_list[i],
                "status": status_list[i],
                "detail": detail_list[i],
                "total": total_list[i],
                "withdraw": withdraw_list[i],
            },
        )


def getColor(mymembers):
    for member in mymembers:
        if member["detail"] == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
            member["color"] = "üî¥"
        elif member["detail"] == "‡∏Ç‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥":
            member["color"] = "üü†"
        elif member["detail"] == "‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô":
            member["color"] = "üü°"
        elif member["detail"] == "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß":
            member["color"] = "üü¢"

    return mymembers


def coutMember(mymembers):
    percents = [0, 0, 0, 0]
    total = len(mymembers)

    if total == 0:
        return percents

    for member in mymembers:
        if member["detail"] == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
            percents[0] += 1
        elif member["detail"] == "‡∏Ç‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥":
            percents[1] += 1
        elif member["detail"] == "‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô":
            percents[2] += 1
        elif member["detail"] == "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß":
            percents[3] += 1

    percents = [int((x / total) * 100) for x in percents]
    return percents
